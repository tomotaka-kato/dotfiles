# 環境ごとの設定
case ${OSTYPE} in
    darwin*)
        # setting for mac
        # [begin] zplug
        export ZPLUG_HOME=$(brew --prefix)/opt/zplug
        source $ZPLUG_HOME/init.zsh
    ;;
    linux*)
        # setting for linux
        export ZPLUG_HOME=~/.zplug
        source $ZPLUG_HOME/init.zsh
        # add go binary path to $path
        export PATH=$PATH:/usr/local/go/bin
        # add ~/.local/bin to PATH
        export PATH=$PATH:~/.local/bin
    ;;
esac

# ctrl-e を入力すると^Eと入力されてしまう問題の対応
bindkey -e

# [begin] history settings
export HISTFILE=${HOME}/.zsh_history # 履歴ファイルの保存先
export HISTSIZE=1000 # メモリに保存される履歴の件数
export SAVEHIST=100000 # 履歴ファイルに保存される履歴の件数
setopt hist_ignore_dups # 重複を記録しない
# [end] history settings

# [begin] 環境変数
# pyenv
if [[ $(command -v pyenv) ]]; then
    export PYENV_ROOT="$HOME/.pyenv"
    command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
fi

## go
if [[ $(command -v go) ]]; then
    export GOPATH=$HOME/go
    export PATH=$PATH:$GOPATH/bin
fi


# Rust
export PATH=$PATH:$HOME/.cargo/bin

# [end] 環境変数

# コマンドのハイライト
zplug "zsh-users/zsh-syntax-highlighting"
# 履歴を遡りやすくする
zplug "zsh-users/zsh-history-substring-search"
bindkey -M emacs '^P' history-substring-search-up
bindkey -M emacs '^N' history-substring-search-down
zplug "zsh-users/zsh-autosuggestions"
zplug "zsh-users/zsh-completions"
zplug "chrissicool/zsh-256color"

# コマンド補完の文字色の調整
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=244'
# export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=#A0A0A0'

# Install plugins if there are plugins that have not been installed
if ! zplug check --verbose; then
    printf "Install? [y/N]: "
    if read -q; then
        echo; zplug install
    fi
fi

# Then, source plugins and add commands to $PATH
zplug load
# [end] zplug


# [begin] fzf + ghq
function ghq-fzf() {
  local src=$(ghq list | fzf --preview "ls -laTp $(ghq root)/{} | tail -n+4 | awk '{print \$9\"/\"\$6\"/\"\$7 \" \" \$10}'")
  if [ -n "$src" ]; then
    BUFFER="cd $(ghq root)/$src"
    zle accept-line
  fi
  zle -R -c
}
zle -N ghq-fzf
bindkey '^g' ghq-fzf
# [end] fzf + ghq

# [begin] 履歴をfzfで検索
function fzf-select-history() {
    BUFFER=$(history -n -r 1 | fzf --query "$LBUFFER")
    CURSOR=$#BUFFER
    zle reset-prompt
}
zle -N fzf-select-history
bindkey '^r' fzf-select-history
# [end] 履歴をfzfで検索

export EDITOR=nvim

# [begin] alias
alias ll='ls -l'
alias la='ls -a'

# 作業フォルダへの移動
alias cddev='cd ~/src/github.com/tomotaka-kato'
# eza (exa)
if [[ $(command -v eza) ]]; then
  alias ls='eza --icons --git'
  alias lt='eza -T -L 3 -a -I "node_modules|.git|.cache" --icons'
fi
# nvim
if [[ $(command -v nvim) ]]; then
  alias vim='nvim'
fi
# bat
if [[ $(command -v bat) ]]; then
  alias cat='bat'
fi
# lazygit
if [[ $(command -v lazygit) ]]; then
  alias lzg='lazygit'
fi

if [[ $(command -v git) ]]; then
  alias gp='git add . && git commit -m "update" && git push'
fi
# [end] alias

# [begin] lazy load
# 仮のnvmコマンド
nvm() {
  # 仮のnvmコマンドをunset
  unset -f nvm

  # 環境に応じて設定を読み込む
  case ${OSTYPE} in
    darwin*)
      if [[ $(command -v nvm) ]]; then
        export NVM_DIR="$HOME/.nvm"
        source $(brew --prefix nvm)/nvm.sh
      fi
    ;;
    linux*)
      export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
      if [[ $(command -v nvm) ]]; then
        export NVM_DIR="$HOME/.nvm"
        # source $(brew --prefix nvm)/nvm.sh
        [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
      fi
    ;;
  esac
  # 仮のnvmコマンドに渡された引数を本物に受け渡す
  nvm "$@"
}

# 仮のpyenvコマンド
pyenv() {
  unset -f pyenv
  eval "$(pyenv init --path)"
  eval "$(pyenv init -)"
  pyenv "$@"
}
# [end] lazy load

PATH=${NVM_DIR:-$HOME/.nvm}/default/bin:$PATH
MANPATH=${NVM_DIR:-$HOME/.nvm}/default/share/man:$MANPATH
export NODE_PATH=${NVM_DIR:-$HOME/.nvm}/default/lib/node_modules

# （以下 Zsh のみ）
# $NODE_PATH にバージョン番号が含まれていないと `yo doctor` が警告を出す
# 次のように書くと $NODE_PATH のシンボリックリンクが展開され、警告が出なくなる
# (Hint: .nvm/default は .nvm/vX.Y.Z へのシンボリックリンク)
NODE_PATH=${NODE_PATH:A}

# Starshipの初期化。
# 必ずファイルの最後で読み込む
eval "$(starship init zsh)"
